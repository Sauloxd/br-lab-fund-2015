;***** constantes *****
4000 0000 ; "h0000<"		;	h0000 <
4001 0000 ; "h0001<"		;	h0001 <
4002 0000 ; "h0002<"		;	h0002 <
4003 0000 ; "h0100<"		;	h0100 <
4004 0000 ; "hFF00<"		;	hFF00 <
4005 0000 ; "hFFFF<"		;	hFFFF <
4006 0000 ; "AmLoad<"		;	AmLoad <
4007 0000 ; "AmDownload<"		;	AmDownload <
4008 0000 ; "h0003<"		;	h0003 <
;***** variaveis para GETLINEF() *****

2000 0000 ; "GETLINEF>"		;	GETLINEF >
4009 0000 ; "GL_instr<"		;	GL_instr <
4010 0000 ; "GL_END<"		;	GL_END <
4011 0000 ; "GL_UL<"		;	GL_UL <
4012 0000 ; "GL_BUF<"		;	GL_BUF <
4013 0000 ; "GL_temp<"		;	GL_temp <

4014 0000 ; "GL_EOL<"		;	GL_EOL <
4015 0000 ; "GL_EOF<"		;	GL_EOF <

;***** variaveis para PACK() *****
2064 0000 ; "PACK>"		;	PACK    >
4016 0000 ; "packA<"		;	packA   <
4017 0000 ; "packB<"		;	packB   <  

;***** variaveis para UNPACK() *****
206e 0000 ; "UNPACK>"		;	UNPACK  >
4018 0000 ; "unpackA<"		;	unpackA <
4019 0000 ; "unpackB<"		;	unpackB <
4020 0000 ; "temp<"		;	temp <

;***** variaveis para STRCMP() *****
20a2 0000 ; "STRCMP>"		;	STRCMP    >
4021 0000 ; "count<"		;	count     <  ;Resposta
4022 0000 ; "string1<"		;	string1   <
4023 0000 ; "string2<"		;	string2   <
4024 0000 ; "A1<"		;	A1        <
4025 0000 ; "B1<"		;	B1        <
4026 0000 ; "A10<"		;	A10       <
4027 0000 ; "B10<"		;	B10       <
4028 0000 ; "AmLoad<"		;	AmLoad    <
4029 0000 ; "AmEnd1<"		;	AmEnd1    <
4030 0000 ; "AmEnd2<"		;	AmEnd2    <
4031 0000 ; "AmGD<"		;	AmGD      <

;***** variaveis para ifZAddCount() *****
2092 0000 ; "IfZAddCount>"		;	IfZAddCount >

;***** variaveis para MEMCOPY() *****
20f2 0000 ; "MEMCOPY>"		;	MEMCOPY >
4032 0000 ; "numeroDeBytes<"		;	numeroDeBytes <
4033 0000 ; "origem<"		;	origem  <
4034 0000 ; "destino<"		;	destino <
4035 0000 ; "countMemCopy<"		;	countMemCopy    <
4036 0000 ; "moveMemCopy<"		;	moveMemCopy     <

				;	& /0000

;**************************** GETLINEF() ***************************************;

8000 0000		;	GETLINEF  $ /0001   0
				;	GETLINEF  $ /0001
d002 8012		;	          LD GL_BUF
d004 5001		;	          - h0001
d006 9012		;	          MM GL_BUF
          ;necessario para caso nao ter espaco
          ;o ultimo espaco ser end of string 00
a008 103e		;	GL_loop   JZ semEspaco
d00a 8008		;	          LD h0003 ;dispositivo de leitra 3
d00c 9016		;	          MM packA
d00e 8011		;	          LD GL_UL ;unidade logica
d010 9017		;	          MM packB
a012 a064		;	          SC PACK
d014 4031		;	          +  AmGD
a016 9018		;	          MM GETL1
8018 0000		;	GETL1     $ /0001   0
				;	GETL1     $ /0001
d01a 9013		;	          MM GL_temp
d01c 5014		;	          - GL_EOL
a01e 103a		;	          JZ EOF ;implement
          ;fim da verificacao EOL/EOF
d020 8007		;	          LD AmDownload
d022 4010		;	          + GL_END
a024 9028		;	          MM GETL2
d026 8013		;	          LD GL_temp
8028 0000		;	GETL2     $ /0001   0
				;	GETL2     $ /0001
d02a 8010		;	          LD GL_END
d02c 4002		;	          + h0002
d02e 9010		;	          MM GL_END
          ;Atualiza o contador que conta espacos sobrando
d030 8012		;	          LD GL_BUF
d032 5001		;	          - h0001
d034 9012		;	          MM GL_BUF
a036 0008		;	          JP GL_loop

a038 b000		;	endGL     RS GETLINEF
          

d03a 8001		;	EOF      LD h0001
a03c 0038		;	         JP endGL

d03e 8008		;	semEspaco LD h0003 ;dispositivo de leitra 3
d040 9016		;	          MM packA
d042 8011		;	          LD GL_UL ;unidade logica
d044 9017		;	          MM packB
a046 a064		;	          SC PACK ;03UL
d048 4031		;	          +  AmGD ;D000
a04a 904c		;	          MM GETL4
804c 0000		;	GETL4     $ /0001   0
				;	GETL4     $ /0001
d04e 5014		;	          - GL_EOL
a050 103a		;	          JZ EOF
          ;Oque esta comentando eh para caso o fim da palavar seja apenas 00, e nao 0000
          ; LD unpackA
          ; MM packA
d052 8000		;	          LD h0000
          ; MM packB
          ; SC PACK
d054 9013		;	          MM GL_temp  
d056 8007		;	          LD AmDownload
d058 4010		;	          + GL_END
a05a 905e		;	          MM GETL3
d05c 8013		;	          LD GL_temp
805e 0000		;	GETL3     $ /0001   0
				;	GETL3     $ /0001
d060 8000		;	          LD h0000
a062 0038		;	          JP endGL


;**************************** PACK() ***************************************;
8064 0000		;	PACK      $ /0001   0
				;	PACK      $ /0001
d066 8016		;	          LD packA ;Carrega no acc <- packA
d068 6003		;	          *  h0100    ; multiplca por h0100
d06a 4017		;	          +  packB
a06c b064		;	          RS PACK

;*************************** UNPACK() **************************************;
806e 0000		;	UNPACK    $  /0001   0
				;	UNPACK    $  /0001
d070 9020		;	          MM temp   ;guarda no temp
d072 6003		;	          *  h0100    ;shift de 2 bytes para esquerda
d074 7003		;	          /  h0100    ;shift de 2 bytes para direita
a076 207c		;	          JN casoNeg ;caso negativo jmp para casoNEG
d078 9019		;	          MM unpackB
a07a 0080		;	          JP parteA ;continua para pegar a primeira parte da palavra
d07c 5004		;	casoNeg   - hFF00
d07e 9019		;	          MM unpackB
d080 8020		;	parteA    LD temp
d082 5019		;	          - unpackB
d084 7003		;	          / h0100
a086 208c		;	          JN casoNeg2 ;caso negativo
d088 9018		;	          MM unpackA
a08a 0090		;	          JP fimSubRotina
d08c 5004		;	casoNeg2  - hFF00
d08e 9018		;	          MM unpackA
a090 b06e		;	fimSubRotina  RS UNPACK

;************************ IfZAddCount() ************************************;
8092 0000		;	IfZAddCount       $ /0001   0
				;	IfZAddCount       $ /0001
a094 109a		;	               JZ contAddCount ;Se nao for igual a zero, vai pra fimAddCount
a096 00ee		;	               JP endSTRCMP
a098 b092		;	fimAddCount    RS IfZAddCount
d09a 8021		;	contAddCount   LD count
d09c 4001		;	               + h0001
d09e 9021		;	               MM count
a0a0 0098		;	               JP fimAddCount

;**************************** STRCMP() ************************************;

80a2 0000		;	STRCMP    $  /0001   0
				;	STRCMP    $  /0001
d0a4 8029		;	STRCMPloop LD AmEnd1 ;Pega primeiro elemento
d0a6 4028		;	          +  AmLoad ;soma com instrução de colocar no acc
a0a8 90aa		;	          MM next1
80aa 0000		;	next1     $  /0001   0
				;	next1     $  /0001
a0ac a06e		;	          SC UNPACK   ;chama surotina unpack()
d0ae 8018		;	          LD unpackA
d0b0 9024		;	          MM A1
d0b2 8019		;	          LD unpackB
d0b4 9025		;	          MM B1

d0b6 8030		;	          LD AmEnd2 ;Carreg primeira palavra da string2 no acc
d0b8 4028		;	          +  AmLoad ;soma com instrução de colocar no acc
a0ba 90bc		;	          MM next2
80bc 0000		;	next2     $  /0001   0
				;	next2     $  /0001
a0be a06e		;	          SC UNPACK   ;chama surotina unpack()
d0c0 8018		;	          LD unpackA
d0c2 9026		;	          MM A10
d0c4 8019		;	          LD unpackB
d0c6 9027		;	          MM B10
          
          ;compara A1 com A10
d0c8 8026		;	          LD A10
a0ca 10ee		;	          JZ endSTRCMP
d0cc 8024		;	          LD A1
a0ce 10ee		;	          JZ endSTRCMP
d0d0 5026		;	          - A10
a0d2 a092		;	          SC IfZAddCount
          ;;Verifica B1 e B10
d0d4 8027		;	          LD B10
a0d6 10ee		;	          JZ endSTRCMP
d0d8 8025		;	          LD B1
a0da 10ee		;	          JZ endSTRCMP
d0dc 5027		;	          - B10
a0de a092		;	          SC IfZAddCount

          ;Auto modificação
d0e0 8029		;	          LD AmEnd1
d0e2 4002		;	          +  h0002
d0e4 9029		;	          MM AmEnd1

d0e6 8030		;	          LD AmEnd2
d0e8 4002		;	          +  h0002
d0ea 9030		;	          MM AmEnd2

a0ec 00a4		;	          JP STRCMPloop

d0ee 8021		;	endSTRCMP      LD count 
a0f0 b0a2		;	               RS STRCMP

;**************************** MEMCOPY() ************************************;
80f2 0000		;	MEMCOPY   $ /0001   0
				;	MEMCOPY   $ /0001
d0f4 8032		;	          LD numeroDeBytes
a0f6 1128		;	          JZ endMEMCOPYfail
d0f8 9035		;	loopMemCopy MM countMemCopy
d0fa 8035		;	          LD countMemCopy
d0fc 5001		;	          - h0001
d0fe 9035		;	          MM countMemCopy
d100 8028		;	          LD AmLoad
d102 4033		;	          + origem
a104 9106		;	          MM proxInstr
8106 0000		;	proxInstr $ /0001   0
				;	proxInstr $ /0001
d108 9036		;	          MM moveMemCopy
d10a 8035		;	          LD countMemCopy
d10c 8007		;	          LD AmDownload
d10e 4034		;	          + destino
a110 9114		;	          MM proxInstr2
d112 8036		;	          LD moveMemCopy ;conteudo
8114 0000		;	proxInstr2 $ /0001   0
				;	proxInstr2 $ /0001
          ;Atualiza auto-modificação
d116 8033		;	          LD origem 
d118 4002		;	          + h0002
d11a 9033		;	          MM origem
d11c 8034		;	          LD destino
d11e 4002		;	          + h0002
d120 9034		;	          MM destino
          ;verificar numero par de bytes
d122 8035		;	          LD countMemCopy
a124 112c		;	          JZ endMEMCOPYsuccess
a126 00f8		;	          JP loopMemCopy

d128 8005		;	endMEMCOPYfail    LD  hFFFF
a12a b0f2		;	                  RS  MEMCOPY

d12c 8000		;	endMEMCOPYsuccess   LD h0000    
a12e b0f2		;	                    RS MEMCOPY



